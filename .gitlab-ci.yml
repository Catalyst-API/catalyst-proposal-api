include:
  - remote: 'https://git.raddcreative.io/raddcreative-open-source/autodevops/raw/master/gitlab-ci-20211204.yml'

# ---------------------------------------------------------------------------
.auto_devops_custom: &auto_devops_custom |
  set -xe
  # Auto DevOps variables and functions  
  # extract app version
  # export APP_VERSION=$(awk '/version/{gsub(/("|",)/,"",$2);print $2};' package.json)
  export APP_VERSION=$CI_COMMIT_TAG
  export APP_VERSION_AND_BUILD="${APP_VERSION}-${CI_PIPELINE_ID}"

  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE
  export CI_APPLICATION_TAG=$APP_VERSION_AND_BUILD

  if [ -z ${AUTO_DEVOPS_REPLICAS_COUNT+x} ]; then
    export replicas="1"
  else
    export replicas="$AUTO_DEVOPS_REPLICAS_COUNT"
  fi

  if [ -z ${AUTO_DEVOPS_CERTMANAGER_SERVER+x} ]; then
    export cert_server='https://acme-staging-v02.api.letsencrypt.org/directory'
  else
    export cert_server="$AUTO_DEVOPS_CERTMANAGER_SERVER"
  fi

  if [[ "$CI_PROJECT_VISIBILITY" != "public" ]]; then
    export secret_name="deploy-token-$AUTO_DEVOPS_APP_PREFIX"
  else
    export secret_name=''
  fi

  function deploy_postgres() {
    helm repo add bitnami https://charts.bitnami.com/bitnami
    helm repo update

    echo "install postgres for web"
    helm upgrade --install \
        --timeout 300s \
        --wait \
        --atomic \
        --namespace="$KUBE_NAMESPACE" \
        -f ./chart/values.postgresql.yaml \
        --set extraEnv[0].value="$POSTGRESQL_DB" \
        --set extraEnv[1].value="$POSTGRESQL_USER" \
        --set extraEnv[2].value="$POSTGRESQL_PASSWORD" \
        --set extraEnv[3].value="$POSTGRESQL_POSTGRES_PASSWORD" \
        --set persistence.existingClaim="$KUBE_NAMESPACE-postgres-web-pvc" \
        --set persistence.subPath="lido/$CARDANO_NETWORK/postgres/web" \
        --set persistence.selector.matchLabels.name="lidolovelace-postgres-web-pv" \
        lidolovelace-web-db \
        bitnami/postgresql
  }

  function deploy_redis() {
    helm repo add bitnami https://charts.bitnami.com/bitnami
    helm repo update

    echo "install redis"
    helm upgrade --install \
        --timeout 300s \
        --wait \
        --atomic \
        --namespace="$KUBE_NAMESPACE" \
        -f ./chart/values.redis.yaml \
        --set global.redis.password="$REDIS_PASSWORD" \
        --set auth.password="$REDIS_PASSWORD" \
        --set master.persistence.enabled="true" \
        redis \
        bitnami/redis
  }

  function deploy_web_services() {
    DEPLOYMENT_NAME="$AUTO_DEVOPS_APP_PREFIX-web.$CI_ENVIRONMENT_SLUG"

    helm upgrade "$DEPLOYMENT_NAME" ./chart/lidonation.com \
      --wait \
      --install \
      --atomic \
      --timeout 600s \
      -f ./chart/values.yaml \
      --set application.track="$track" \
      --set certmanager.server="$cert_server" \
      --set services.web.certificate.host="$AUTO_DEVOPS_WEB_HOST" \      
      --set services.web.replicaCount="$replicas" \
      --set services.web.service.url="$AUTO_DEVOPS_WEB_HOST" \
      --set services.web.secret.app_key="$APP_KEY" \
      --set services.web.config.APP_URL="$AUTO_DEVOPS_WEB_HOST" \
      --set services.web.config.CLOUDFLARE_TOKEN="$CLOUDFLARE_TOKEN" \
      --set services.web.config.KUBERNETES_NAMESPACE="$KUBE_NAMESPACE" \      
      --set services.web.config.POSTGRESQL_USER="$POSTGRESQL_USER" \
      --set services.web.config.POSTGRESQL_DB_SYNC_USER="$POSTGRESQL_DB_SYNC_USER" \
      --set services.web.secret.RECAPTCHA_V3_SECRET_KEY="$RECAPTCHA_V3_SECRET_KEY" \
      --set services.web.secret.RECAPTCHA_V3_SITE_KEY="$RECAPTCHA_V3_SITE_KEY" \
      --set services.web.secret.MAIL_USERNAME="$MAILTRAP_USERNAME" \
      --set services.web.secret.MAIL_PASSWORD="$MAILTRAP_PASSWORD" \
      --set services.web.secret.DEEPL_AUTH_KEY="$DEEPL_AUTH_KEY" \
      --set services.web.secret.MEILISEARCH_KEY="$MEILISEARCH_KEY" \
      --set services.web.secret.TWITTER_CONSUMER_SECRET="$TWITTER_CONSUMER_SECRET" \
      --set services.web.secret.TWITTER_CONSUMER_KEY="$TWITTER_CONSUMER_KEY" \
      --set services.web.secret.TWITTER_ACCESS_TOKEN_SECRET="$TWITTER_ACCESS_TOKEN_SECRET" \
      --set services.web.secret.TWITTER_ACCESS_TOKEN="$TWITTER_ACCESS_TOKEN" \
      --set services.web.secret.TWITTER_BEARER_TOKEN="$TWITTER_BEARER_TOKEN" \
      --set services.web_db.secret.POSTGRESQL_PASSWORD="$POSTGRESQL_PASSWORD" \
      --set services.web_db.secret.POSTGRESQL_POSTGRES_PASSWORD="$POSTGRESQL_POSTGRES_PASSWORD" \
      --set services.redis.secret.REDIS_PASSWORD="$REDIS_PASSWORD" \
      --set image.tag="$CI_APPLICATION_TAG" \
      --set image.pullSecret="$secret_name" \
      --set namespace=${KUBE_NAMESPACE} \
      --namespace="$KUBE_NAMESPACE" \
      --version="$APP_VERSION"
  }

  deploy_web_services


cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ./src/node_modules

variables:
  HELM_VERSION: 3.8.0
  DEPLOY_INFRA:
    value: 'False'
    description: 'Install infrastructure services (redis, postgres)'
  DEPLOY_WEBSITE:
    value: 'True'
    description: 'Build and deploy api.projectcatalyst.org'  
  WEB_BASE_IMAGE_VER:
    value: ''
    description: 'New tag for WEB base image. Format V[N]'  

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

.setup: &setup
  - *auto_devops_custom
  - check_kube_domain
  - install_dependencies
  - ensure_namespace
  - create_secret

.infra_rules: &infra_rules
  - if: '$CI_COMMIT_BRANCH == "master" &&
              ($DEPLOY_INFRA == "True" || $DEPLOY_INFRA == "true")'
    when: manual

.deploy_template: &deploy_template
  image: alpine:latest
  retry: 0
  cache: {}

.deploy_postgres: &deploy_postgres
  <<: *deploy_template
  script:
    - *setup
    - deploy_postgres
  rules: *infra_rules

.deploy_redis: &deploy_redis
  <<: *deploy_template
  script:
    - *setup
    - deploy_redis
  rules: *infra_rules

######################################### Pipelines ############################################
################################################################################################

########## Pre-Build jobs #########
###################################
yarn:
  stage: build_app
  image: node:15.9.0-alpine3.10
  retry: 1
  script: |-
    set -vx
    export PATH=$PATH:/usr/local/bin
    cd ./src
    yarn config set ignore-engines true
    yarn install
    yarn run production
  artifacts:
    paths:
      - ./src/public
    expire_in: 6 days
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" && ($DEPLOY_WEBSITE == "True" || $DEPLOY_WEBSITE == "true")'
    - if: '$CI_COMMIT_BRANCH == "master" && ($DEPLOY_WEBSITE == "True" || $DEPLOY_WEBSITE == "true")'

composer:
  stage: build_app
  image: composer:2.1.9
  retry: 1
  cache: { }
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  script:
    - export PATH=$PATH:/usr/local/bin
    - composer install -o -d ./src --ignore-platform-reqs
  artifacts:
    paths:
      - ./src/vendor
    expire_in: 6 days
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" && ($DEPLOY_WEBSITE == "True" || $DEPLOY_WEBSITE == "true")'
    - if: '$CI_COMMIT_BRANCH == "master" && ($DEPLOY_WEBSITE == "True" || $DEPLOY_WEBSITE == "true")'

web_base:
  stage: build_app
  image: docker:20.10.8-git
  retry: 1
  cache: {}
  script:
    - *auto_devops_custom
    - setup_docker
    - |
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo "Building web BASE Dockerfile..."
      docker build  \
        --cache-from "$CI_APPLICATION_REPOSITORY/api.projectcatalyst.org.base:latest" \
        -f ./src/api.projectcatalyst.org/Dockerfile.base \
        -t "$CI_APPLICATION_REPOSITORY/api.projectcatalyst.org.base:${WEB_BASE_IMAGE_VER}" \
        -t "$CI_APPLICATION_REPOSITORY/api.projectcatalyst.org.base:latest" \
        ./src/api.projectcatalyst.org/.

      echo "Pushing web to GitLab Container Registry..."
      docker push "$CI_APPLICATION_REPOSITORY/api.projectcatalyst.org.base:${WEB_BASE_IMAGE_VER}"
      docker push "$CI_APPLICATION_REPOSITORY/api.projectcatalyst.org.base:latest"
      echo ""
  rules:
    - if: '$WEB_BASE_IMAGE_VER'

########## Docker jobs #########
###################################
build_api:
  stage: build_image
  image: docker:20.10.8-git
  retry: 1
  cache: {}
  needs:
    - yarn
    - composer
    - job: web_base
      optional: true
  script:
    - *auto_devops_custom
    - auto_devops_custom
    - setup_docker
    - |
      set -xe
      echo "CI_COMMIT_TAG: $CI_COMMIT_TAG"
      # echo 'generate nginx/fpm resolver for $KUBE_NAMESPACE'
      # echo "resolver kube-dns.kube-system.svc.cluster.local valid=10s ipv6=off;"  > ./src/api.projectcatalyst.org/etc/nginx/resolver.conf
      # echo "set $backendfpm lidolovelace-web-fpm-service.${KUBE_NAMESPACE}.svc.cluster.local:9000;" >> ./src/api.projectcatalyst.org/etc/nginx/resolver.conf
      # echo "fastcgi_pass $backendfpm;" >> ./src/api.projectcatalyst.org/etc/nginx/resolver.conf

      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo "Building web Dockerfile..."
      docker build  \
        --cache-from "$CI_APPLICATION_REPOSITORY/api.projectcatalyst.org:latest" \
        -f ./src/api.projectcatalyst.org/Dockerfile -t "$CI_APPLICATION_REPOSITORY/api.projectcatalyst.org:$CI_APPLICATION_TAG" \
        -t "$CI_APPLICATION_REPOSITORY/api.projectcatalyst.org:latest" ./src/api.projectcatalyst.org/.

      echo "Pushing web to GitLab Container Registry..."
      docker push "$CI_APPLICATION_REPOSITORY/api.projectcatalyst.org:$CI_APPLICATION_TAG"
      docker push "$CI_APPLICATION_REPOSITORY/api.projectcatalyst.org:latest"
      echo ""
  rules:
    - if: '$CI_COMMIT_TAG != "" &&
              ($DEPLOY_WEBSITE == "True" || $DEPLOY_WEBSITE == "true")'

############ Test Jobs ###########
##################################

#test_phpunit:
#  stage: test
#  image: registry.raddcreative.io/lidonation/lidonation/api.projectcatalyst.org:latest
#  retry: 1
#  script:
#    - |
#      cd ./src
#      cp .env.example .env
#      php artisan key:generate
#      php artisan test
#  rules:
#    - when: on_success


########## Deploy to prod env Jobs #########
############################################
redis-prod:
  <<: *deploy_redis
  stage: production
  environment:
    name: production

postgres-prod:
  <<: *deploy_postgres
  stage: production
  environment:
    name: production

production:
  <<: *deploy_template
  stage: production
  retry: 1
  script:
    - *setup
    - deploy_services
    - persist_environment_url
  environment:
    name: production
  rules:
    - if: '$CI_COMMIT_TAG != "" && (
              ($DEPLOY_WEBSITE == "True" || $DEPLOY_WEBSITE == "true")
              )'
      when: manual